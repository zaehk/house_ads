//
//  AdListInteractorTests.swift
//  iOSCodeChallenge
//
//  Created by Borja Saez de Guinoa Vilaplana on 20/2/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import iOSCodeChallenge
import XCTest

class AdListInteractorTests: XCTestCase
{
    // MARK: Subject under test
    
    var sut: AdListInteractor!
    
    // MARK: Test lifecycle
    
    override func setUp()
    {
        super.setUp()
        setupAdListInteractor()
    }
    
    override func tearDown()
    {
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupAdListInteractor()
    {
        sut = AdListInteractor()
    }
    
    // MARK: Test doubles
    
    class AdListPresentationLogicSpy: AdListPresentationLogic
    {
        var presentRealStateAdsCalled = false
        var presentToggledFavoriteCalled = false
        var presentErrorFetchingRealStateAdsCalled = false
        
        
        func presentRealStateAds(response: [(adListResult: IDResultDTO, isFavorite: Bool)]) {
            presentRealStateAdsCalled = true
        }
        
        func presentToggledFavorite(idResultDTO: IDResultDTO, newStatus: Bool, indexToReplace: Int) {
            presentToggledFavoriteCalled = true
        }
        
        func presentErrorFetchingRealStateAds() {
            presentErrorFetchingRealStateAdsCalled = true
        }
        
    }
    
    // MARK: Tests
    
    func testfetchRealStateAds()
    {
        // Given
        let spy = AdListPresentationLogicSpy()
        let adServiceMock = AdServiceMock(expectedAdList: .success, expectedAdDetail: .success)
        sut.adService = adServiceMock
        sut.presenter = spy
        
        // When
        sut.fetchRealStateAds()
        
        // Then
        XCTAssertTrue(adServiceMock.fetchAdListCalled, "fetchRealStateAds should ask the adService to fetch ads")
    }
    
    func testFetchFavoriteStatusFromDB()
    {
        // Given
        let spy = AdListPresentationLogicSpy()
        let adServiceMock = AdServiceMock(expectedAdList: .success, expectedAdDetail: .success)
        let adLocalServiceMock = AdLocalServiceMock()
        
        sut.adService = adServiceMock
        sut.adLocalService = adLocalServiceMock
        sut.presenter = spy
        
        // When
        sut.fetchRealStateAds()
        
        // Then
        XCTAssertTrue(adLocalServiceMock.checkIfIsFavoriteCalled, "if fetchRealStateAds return results, the interactor must ask the adLocalService to retrieve the favorite status")
        XCTAssertEqual(adLocalServiceMock.checkIfIsFavoriteNumberOfTimesCalled, 5, "checkIfIsFavorite must be called the same number of times as elements in the result array (5 in this JSON)")
    }
    

}
