//
//  AdDetailViewController.swift
//  iOSCodeChallenge
//
//  Created by Borja Saez de Guinoa Vilaplana on 13/2/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol AdDetailDisplayLogic: class
{
    func showAdDetail(viewModel: AdDetailViewModel)
    func showAdDetailError()
    func showFavoriteError()
}

class AdDetailViewController: UIViewController
{
    var interactor: AdDetailBusinessLogic?
    var router: (NSObjectProtocol & AdDetailRoutingLogic & AdDetailDataPassing)?
    var picturesCells: [CollectionDrawerItemProtocol] = []
    
    // MARK: -Views-
    
    private let adPicturesCollectionView: UICollectionView = {
        let layout = UICollectionViewFlowLayout()
        layout.scrollDirection = .horizontal
        layout.minimumInteritemSpacing = 0;
        layout.minimumLineSpacing = 0;
        let collectionView = UICollectionView.init(frame: CGRect.init(), collectionViewLayout: layout)
        collectionView.backgroundColor = .white
        collectionView.showsHorizontalScrollIndicator = true
        collectionView.indicatorStyle = .white
        collectionView.contentInset = UIEdgeInsets.init(top: 0, left: 0, bottom: 0, right: 0)
        collectionView.isPagingEnabled = true
        return collectionView
    }()
    
    private let descriptionTextView: UITextView = {
        let textView = UITextView()
        textView.textColor = .black
        textView.font = UIFont.systemFont(ofSize: 20, weight: .medium)
        textView.isScrollEnabled = true
        textView.isEditable = false
        textView.layer.borderColor = Styles.Colors.idealistaPurple.cgColor
        return textView
    }()
    
    private let priceLabel: PriceLabel = PriceLabel()
    private let favoriteButton: FavoriteButton = FavoriteButton()
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        setupViews()
        setupCollectionView()
        setupConstraints()
        fetchAdDetail()
    }
    
    private func setupViews(){
        self.view.backgroundColor = .white
        self.navigationItem.largeTitleDisplayMode = .never
        self.favoriteButton.addTarget(self, action: #selector(self.favoriteTapped), for: .touchUpInside)
    }
    
    private func setupCollectionView(){
        self.adPicturesCollectionView.delegate = self
        self.adPicturesCollectionView.dataSource = self
    }
    
    private func setupConstraints(){
        self.view.addSubview(adPicturesCollectionView)
        self.view.addSubview(priceLabel)
        self.view.addSubview(descriptionTextView)
        self.view.addSubview(favoriteButton)
        
        adPicturesCollectionView.snp.makeConstraints { (make) in
            make.left.right.equalToSuperview()
            make.top.equalTo(self.view.safeAreaLayoutGuide)
            make.height.equalTo(250)
        }
        
        priceLabel.snp.makeConstraints({
            $0.top.equalTo(adPicturesCollectionView.snp.bottom).offset(10)
            $0.left.equalToSuperview().inset(20)
        })
        
        descriptionTextView.snp.makeConstraints({
            $0.left.right.equalToSuperview().inset(20)
            $0.top.equalTo(priceLabel.snp.bottom).offset(5)
            $0.bottom.equalToSuperview().inset(20)
        })
        
        favoriteButton.snp.makeConstraints({
            $0.centerY.equalTo(priceLabel)
            $0.right.equalToSuperview().inset(20)
            $0.width.height.equalTo(30)
        })
        
    }

    func fetchAdDetail()
    {
        interactor?.fetchAdDetail()
    }
    
    @objc private func favoriteTapped(){
        interactor?.toggleFavoriteStatus()
    }
    
}

//MARK: -Display logic

extension AdDetailViewController: AdDetailDisplayLogic {
    
    func showFavoriteError() {
        let alert = UIAlertController.init(title: Literals.Error.error, message: Literals.Error.favoriteToggleError, preferredStyle: .alert)
        alert.addAction(UIAlertAction.init(title: Literals.Error.accept, style: .default, handler: nil))
    }
    
    func showAdDetailError() {
        let alert = UIAlertController.init(title: nil, message: Literals.Error.adDetailError, preferredStyle: .alert)
        alert.addAction(UIAlertAction.init(title: Literals.Error.accept, style: .default, handler: { (_) in
            self.navigationController?.popViewController(animated: true)
        }))
    }
    
    
    
    func showAdDetail(viewModel: AdDetailViewModel) {
        self.descriptionTextView.text = viewModel.description
        self.priceLabel.text = viewModel.price
        self.favoriteButton.isFavorite(favorite: viewModel.isFavorite)
        self.picturesCells = viewModel.imagesCells
        self.adPicturesCollectionView.reloadData()
    }
    
}




//MARK: -CollectionView management

extension AdDetailViewController: UICollectionViewDataSource, UICollectionViewDelegate, UICollectionViewDelegateFlowLayout {
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        picturesCells.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let model = picturesCells[indexPath.row]
        let drawer = model.collectionDrawer
        let cell = drawer.dequeueCollectionCell(collectionView, indexPath: indexPath)
        drawer.drawCollectionCell(cell, withItem: model)
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        adPicturesCollectionView.frame.size
    }
    
}
